package com.springboot.scm.impl;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.springboot.scm.entitis.User;
import com.springboot.scm.helpers.AppConstants;
import com.springboot.scm.helpers.ResourceNotFoundException;
import com.springboot.scm.helpers.UserAlreadyExistsException;
import com.springboot.scm.repositories.UserRepo;
import com.springboot.scm.services.UserService;



@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepo userRepo;
    
    @Autowired
    private PasswordEncoder passwordEncoder;

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Override
	public User saveUser(User user) {
		String userId=UUID.randomUUID().toString();
		
		
		user.setUserId(userId);
		//Encode password
		user.setPassword(passwordEncoder.encode(user.getPassword()));
		
		//set the user roles
		user.setRoleList(List.of(AppConstants.ROLE_USER));
		

	    // Check for duplicate email
	    Optional<User> existingUser = userRepo.findByEmail(user.getEmail());
	    if (existingUser.isPresent()) {
	        throw new UserAlreadyExistsException("This email is already registered: " + user.getEmail());
	    }
		
		return userRepo.save(user);
	}

	@Override
	public Optional<User> getUserById(String id) {
		
		return userRepo.findById(id);
	}

	@Override
	public Optional<User> updateUser(User user) {
		
        User existingUser = userRepo.findById(user.getUserId())
                .orElseThrow(() -> new ResourceNotFoundException("User Not Found with ID: "));

        // Update the fields
        existingUser.setName(user.getName());
        existingUser.setEmail(user.getEmail());
        existingUser.setPassword(user.getPassword());
        existingUser.setAbout(user.getAbout());
        existingUser.setPhoneNumber(user.getPhoneNumber());
        existingUser.setProfilePic(user.getProfilePic());
        existingUser.setEnabled(user.isEnabled());
        existingUser.setEmailVerified(user.isEmailVerified());
        existingUser.setPhoneVerified(user.isPhoneVerified());
        existingUser.setProvider(user.getProvider());
        existingUser.setProviderUserId(user.getProviderUserId());
        // Save and return
        User save=userRepo.save(existingUser);
        return Optional.ofNullable(save);
//        return Optional.of(userRepo.save(existingUser));
	}

	@Override
	public void deleteUser(String id) {
        User user2 = userRepo.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("User Not Found with ID: "));
        userRepo.delete(user2);
		
	}

	@Override
	public boolean isUserExist(String userId) {
		
        User user2 = userRepo.findById(userId).orElse(null);
                
		
		return user2!= null ? true : false;
	}

	@Override
	public boolean isUserExistByEmail(String email) {
		
        User user2 = userRepo.findByEmail(email).orElse(null);
                
		
		return user2!= null ? true : false;
	}

	@Override
	public List<User> getAllUsers() {

		return userRepo.findAll();
	}
	
	

}
