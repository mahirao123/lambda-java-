package com.springboot.scm.config;

import java.io.IOException;
import java.util.List;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.security.oauth2.core.user.DefaultOAuth2User;
import org.springframework.security.web.DefaultRedirectStrategy;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import com.springboot.scm.entitis.User;
import com.springboot.scm.repositories.UserRepo;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class OAuthAuthenticationSuccessHandler implements AuthenticationSuccessHandler {

    Logger logger = LoggerFactory.getLogger(OAuthAuthenticationSuccessHandler.class);

    @Autowired
    private UserRepo userRepo;

    @Override
    public void onAuthenticationSuccess(
            HttpServletRequest request,
            HttpServletResponse response,
            Authentication authentication) throws IOException, ServletException {

        logger.info("OAuthAuthenticationSuccessHandler triggered...");

        OAuth2AuthenticationToken oAuth2AuthenticationToken = (OAuth2AuthenticationToken) authentication;
        String authorizedClientRegistrationId = oAuth2AuthenticationToken.getAuthorizedClientRegistrationId();

        logger.info("Provider: {}", authorizedClientRegistrationId);

        DefaultOAuth2User oauthUser = (DefaultOAuth2User) authentication.getPrincipal();
        oauthUser.getAttributes().forEach((key, value) -> logger.info(key + " : " + value));

        User user = new User();
        user.setUserId(UUID.randomUUID().toString());
        user.setRoleList(List.of(AppConstants.ROLE_USER));
        user.setEmailVerified(true);
        user.setEnabled(true);

        // Google login
        if ("google".equalsIgnoreCase(authorizedClientRegistrationId)) {
            user.setEmail(oauthUser.getAttribute("email"));
            user.setProfilePic(oauthUser.getAttribute("picture"));
            user.setName(oauthUser.getAttribute("name"));
            user.setProviderUserId(oauthUser.getName());
            user.setAbout("Account created via Google login");
        }
        // GitHub login
        else if ("github".equalsIgnoreCase(authorizedClientRegistrationId)) {
            String email = oauthUser.getAttribute("email") != null
                    ? oauthUser.getAttribute("email")
                    : oauthUser.getAttribute("login") + "@github.com";

            String picture = oauthUser.getAttribute("avatar_url");
            String name = oauthUser.getAttribute("login");
            String providerUserId = oauthUser.getName();

            user.setEmail(email);
            user.setProfilePic(picture);
            user.setName(name);
            user.setProviderUserId(providerUserId);
            user.setAbout("Account created via GitHub login");
        }
        // Other providers
        else {
            logger.warn("Unknown OAuth Provider: {}", authorizedClientRegistrationId);
            user.setEmail("unknown-" + UUID.randomUUID() + "@example.com");
            user.setName("Unknown User");
            user.setProfilePic(null);
            user.setProviderUserId(oauthUser.getName());
            user.setAbout("Account created via unknown provider");
        }

        // Save user in database if not exists
        User existingUser = userRepo.findByEmail(user.getEmail()).orElse(null);
        if (existingUser == null) {
            userRepo.save(user);
            logger.info("New user created: {}", user.getEmail());
        } else {
            logger.info("User already exists: {}", existingUser.getEmail());
        }

        // Redirect after login
        new DefaultRedirectStrategy().sendRedirect(request, response, "/user/profile");
    }
}
